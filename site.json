{"title":"Electric","googleAnalytics":"UA-37033501-5","index":{"title":"Home","description":"Create beautiful documentation for your projects","content":" Copyright © 2016 Liferay, Inc Powered by WeDeploy™ ","srcFilePath":"src/pages/index.soy","url":"/.","children":[{"children":[{"description":"Getting started with a electric project.","icon":"arrow-right-rod","layout":"docs","title":"Getting Started","weight":1,"content":" Yeoman Generator The Yeoman Generator is the fastest way to get an electric project up and running. Install dependencies npm i -g gulp yo Install generator npm i -g generator-electric Run generator yo electric This will prompt you for a project id and name, then it creates a folder in your current directory with your new electric project. Having issues getting the generator running? Check out Yeoman's FAQs for troubleshooting tips. Build All gulp commands should be run from your project root. gulp This will run the default gulp task registered in your project's gulpfile.js, which includes generating your site, starting up a development server, and starting the watch task. Project Structure Here is a basic example of an electric project. . ├── gulpfile.js └── src ├── layouts │ ├── base.soy │ └── docs.soy ├── pages │ ├── docs │ │ ├── create.md │ │ ├── index.soy │ │ └── parent │ │ ├── child.md │ │ └── index.md │ └── index.soy └── site.json site.json This file contains meta data about your project. Any property can be added to this file. Front matter from all pages is merged with this data and passed to every page as a soy param. Layouts The file structure of layouts is flexible, as soy uses the namespace of every file as an identifier. All layout files must be a soy template, and the only required layout is base.soy. See layouts for more information. Pages Every file in pages with a .soy or .md extension is rendered to HTML during the generate task. The file structure of pages determines the urls of your pages. For the above example, the child.md file will be located at /docs/parent/child.html after generating. Pages named index will be located at the path of it's parent directory, so pages/docs/index.soy will be available at /docs/. See pages for more information. ","srcFilePath":"src/pages/docs/getting-started.md","url":"/docs/getting-started.html"},{"description":"Creating pages in soy and markdown.","icon":"menu-content","layout":"docs","title":"Pages","weight":2,"content":" Front Matter All files in the pages directory must have the following front matter declared at the beginning of the file. --- title: \"Page Title\" description: \"Description.\" --- The title property will be used for auto-generated navigation elements and as the page's ``. Both the title and description properties will be used for search functionality. Soy All files ending with the .soy extension will be rendered as soy templates. --- description: \"Page description.\" title: \"Page\" --- &#123;namespace page&#125; /** */ &#123;template .render&#125; Hello, World! &#123;/template&#125; Note: all namespace properties must be unique across all files within the src directory, and every soy file must define a .render template. Site/Page Data Every page is passed a site and page param. The page param represents the front matter of the current file. {$page.title} {$page.description} The site param contains project meta data such as site.title and site.repo. It also contains the structure of the entire site which can be used to generate navigation elements. This structure data is defined as the site.index property representing the index page of the project. {$site.title} {$site.index} This data is pulled from the dist/site.json file. Additional properties can be added to this data by editing the src/site.json file. Markdown Markdown files are intended for easier writing of documentation and content, these files are rendered to HTML and then wrapped in a soy template and rendered along all soy pages. The namespace is also auto-generated based on the file path, so it does not need to be declared at the top of the file. --- description: \"Page description.\" layout: \"docs\" title: \"Page\" --- Hello, World! See google's documentation for more info. ","srcFilePath":"src/pages/docs/pages.md","url":"/docs/pages.html"},{"description":"Documentation on base layout and sub layouts.","icon":"code-file","layout":"docs","title":"Layouts","weight":3,"content":" Base Layout All projects must have a layouts/base.soy file. This file is responsible for the HTML boilerplate of your site. Every page will be rendered with this layout. &123;namespace base&#125; /** @param content @param page @param serialized @param site */ &#123;template .render private=\"true\"&#125; {$page.title} - {$site.title} {$content} &#123;/template&#125; This layout can be editted to fit the needs of your project, but it must use base as the namespace, and it must include the {lb}$content{rb} variable which renders the content of each page. Inject Tags Inside the base.soy template there are multiple inject tags that are used by electric to import resources and scripts. inject:css/inject:js These tags are used to inject link and script tags for all thirdparty resources located in dist/vendor. inject:metal:js During the generate task they are replaced with the necessary code for automatically invoking Metal components that have been implemented in your project's soy files. Note: these tags only need to be included in the base template. The injected code is what implements the serialized param that is defined at the start of the template. serialized is stringified meta data that Metal consumes to render each page. inject:codemirror:js CodeMirror is responsible for Electric's built in syntax highlighting. This script locates all code examples and applies the appropriate syntax highlighting. Sub Layouts Additional layouts can be created in the layouts folder of your project. These layouts are simply soy templates that can be implemented by individual pages. &123;namespace docs&#125; /** @param content @param elementClasses @param page @param site */ &#123;template .render&#125; {$site.title} {$page.title} {$content} &#123;/template&#125; This template can be implemented by both soy and markdown files. The following example implements the docs layout. soy example. Sub layouts are rendered using soy's call command. --- description: \"Page description.\" title: \"Page\" --- &123;namespace page&#125; /** */ &#123;template .render&#125; {call docs.render data=\"all\"} {param content kind=\"html\"} Hello, World! {/param} {/call} &#123;/template&#125; The data=\"all\" property needs to be set if the layout in question needs to implement any of the global params (site or page). markdown example. Markdown implementation doesn't require any soy code, rather it leverages the front matter layout property to determine the layout. --- description: \"Page description.\" layout: \"docs\" title: \"Page\" --- Hello, World! By specifying layout: \"docs\", the generator will look for a soy template in the layouts directory with the docs namespace. See the section on configuration for info on configuring the markdown engine. ","srcFilePath":"src/pages/docs/layouts.md","url":"/docs/layouts.html"},{"description":"Creating and rendering Metal components.","icon":"module","layout":"docs","title":"Metal Components","weight":4,"content":" Creating Components One of the major benefits of electric is the ability to create metal.js components and invoke them in your soy layouts and pages. Components can exist anywhere in the src directory, for this example we will place them inside src/components. . └── src ├── components │ ├── MyComponent.js │ └── MyComponent.soy ├── layouts │ ├── base.soy │ └── docs.soy └── pages └── index.soy MyComponent.soy &123;namespace MyComponent&#125; /** */ &#123;template .render&#125; Hello, World! &#123;/template&#125; MyComponent.js 'use strict'; import Component from 'metal-component'; import Soy from 'metal-soy'; import templates from './MyComponent.soy'; class MyComponent extends Component { attached() { console.log('MyComponent attached!'); } }; Soy.register(MyComponent, templates); export default MyComponent; Now that you have the base component files, the MyComponent template simply needs to be rendered in a page/layout. Rendering Components To render a metal component in a page/layout, simply use the call command to render the .render template of the component. --- description: \"Page description.\" title: \"Page\" --- &123;namespace page&#125; /** */ &#123;template .render&#125; {call MyComponent.render /} &#123;/template&#125; Now you should see 'MyComponent attached!' in the browser console. Electric Components The electric-components package contains a number of components that are compatible with the site meta data, such as navigation and search components. See configuration for information on adding plugins to your project. These components are invoked the same way as your own components. --- description: \"Page description.\" title: \"Page\" --- &123;namespace page&#125; /** @param site */ &#123;template .render&#125; {call ElectricNavigation.render} {param depth: 1 /} {param section: $site.index /} {/call} &#123;/template&#125; This will render a list with all direct descendants of the index page. ","srcFilePath":"src/pages/docs/metal-components.md","url":"/docs/metal-components.html"},{"description":"Configuration options for gulp tasks.","icon":"gear","layout":"docs","title":"Configuration","weight":5,"content":" Registering All tasks are registered in the project's gulpfile.js. const gulp = require('gulp'); const electric = require('electric'); electric.registerTasks({ gulp: gulp }); Options registerTasks gulp Required: true Type: Gulp instance An instance of gulp. codeMirrorLanguages Required: false Type: Array Default: ['xml', 'css', 'javascript'] An Array of langauge names for syntax highlighting. See CodeMirror for a list of available languages. codeMirrorTheme Required: false Type: String Default: 'dracula' Theme to be used by CodeMirror. See CodeMirror for a list of available themes. markdownOptions Required: false Type: Object An Object Literal containing configuration options for Remarkable which is used to render Markdown files. Example: electric.registerTasks({ gulp: gulp, markdownOptions: { breaks: true } }); See Remarkable's documentation for list of options. pathDest Required: false Type: String Default: dist The path that generated files are placed in. Example: electric.registerTasks({ gulp: gulp, pathDest: 'build' }); Now all generated files will be placed in the build directory. pathSrc Required: false Type: String Default: src The path where all source files are located. Example: electric.registerTasks({ gulp: gulp, pathSrc: 'web' }); Now electric will look inside the web directory for all source files. plugins Required: false Type: Array Array of npm modules that expose Metal components. Example: electric.registerTasks({ gulp: gulp, plugins: ['electric-components'] }); The components found in the electric-components package will now be available to all soy files in your project. Note that every package listed in plugins must also be listed as a dependency in the project's package.json. taskPrefix Required: false Type: String String that is prefixed to every task exposed by electric. Example: electric.registerTasks({ gulp: gulp, taskPrefix: 'electric:' }); The generate task will now be exposed as electric:generate. This option allows you to implement electric in conjunction with other packages that expose gulp tasks without the risk of overwriting previously defined tasks. ","srcFilePath":"src/pages/docs/configuration.md","url":"/docs/configuration.html"},{"description":"Documentation search results.","hidden":true,"title":"Search","content":" Electric Docs Start learning how to leverage the power of Electric. ","srcFilePath":"src/pages/docs/search.soy","url":"/docs/search.html"}],"title":"Documentation","description":"List of articles documenting electric.","content":" Electric Docs Start learning how to leverage the power of Electric. Search Choose a Guide ","srcFilePath":"src/pages/docs/index.soy","url":"/docs"}]},"repo":"wedeploy/electricjs.com"}